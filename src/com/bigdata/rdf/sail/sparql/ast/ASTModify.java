/* Generated By:JJTree: Do not edit this line. ASTModify.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.bigdata.rdf.sail.sparql.ast;

import com.bigdata.rdf.sail.sparql.ast.ASTDeleteClause;
import com.bigdata.rdf.sail.sparql.ast.ASTGraphPatternGroup;
import com.bigdata.rdf.sail.sparql.ast.ASTIRI;
import com.bigdata.rdf.sail.sparql.ast.ASTInsertClause;
import com.bigdata.rdf.sail.sparql.ast.ASTUpdate;
import com.bigdata.rdf.sail.sparql.ast.SyntaxTreeBuilder;
import com.bigdata.rdf.sail.sparql.ast.SyntaxTreeBuilderVisitor;
import com.bigdata.rdf.sail.sparql.ast.VisitorException;

public
class ASTModify extends ASTUpdate {
  public ASTModify(int id) {
    super(id);
  }

  public ASTModify(SyntaxTreeBuilder p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor, Object data) throws VisitorException {
    return visitor.visit(this, data);
  }
  
  public ASTInsertClause getInsertClause() {
	  return jjtGetChild(ASTInsertClause.class);
  }
  
  public ASTDeleteClause getDeleteClause() {
	  return jjtGetChild(ASTDeleteClause.class);
  }
  
  public ASTIRI getWithClause() {
	  if (jjtGetChild(0) instanceof ASTIRI) {
		  return (ASTIRI)jjtGetChild(0);
	  }
	  else {
		  return null;
	  }
  }
  
  public ASTGraphPatternGroup getWhereClause() {
	  return jjtGetChild(ASTGraphPatternGroup.class);
  }
  
}
/* JavaCC - OriginalChecksum=9460d42e4f84afaf785d4073d7125899 (do not edit this line) */

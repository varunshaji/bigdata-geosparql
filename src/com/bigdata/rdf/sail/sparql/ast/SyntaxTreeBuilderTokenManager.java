/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxTreeBuilderTokenManager.java */
package com.bigdata.rdf.sail.sparql.ast;
import java.io.StringReader;
import org.openrdf.model.URI;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.model.vocabulary.XMLSchema;
import org.openrdf.query.algebra.Compare.CompareOp;
import org.openrdf.query.algebra.MathExpr.MathOp;

/** Token Manager. */
public class SyntaxTreeBuilderTokenManager implements SyntaxTreeBuilderConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
      case 40:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 24;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 22;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 11;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 23;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 12;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 26;
         return jjMoveNfa_0(0, 0);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L);
      case 59:
         jjmatchedKind = 10;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 13;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L, 0x0L);
      case 63:
         jjmatchedKind = 25;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1024000000000L, 0x40000040000L, 0x20080L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x800200000000L, 0xa000081L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x8c000004040L, 0x620L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x800200a000000000L, 0x2000000000000L, 0x13040L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x10000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x100040000000000L, 0x100001000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x20400000000000L, 0x100000L, 0x4L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x4000000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000001838L, 0x40800L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x6004000000000000L, 0x4000002000000000L, 0x10L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x89000000030000L, 0x100L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x800080000000000L, 0x400000002000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x18200000000000L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x220800400000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1000000800000000L, 0x1f100007e4288302L, 0x8008L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000800000L, 0x80000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x1010000000L, 0x100000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x4000L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L);
      case 91:
         jjmatchedKind = 8;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 9;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L);
      case 97:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x1024000000000L, 0x40000040000L, 0x20080L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800200000000L, 0xa000081L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x8c000004040L, 0x620L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800200a000000000L, 0x2000000000000L, 0x13040L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x10000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100040000000000L, 0x100001000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20400000000000L, 0x100000L, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x4000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000001838L, 0x40800L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x6004000000000000L, 0x4000002000000000L, 0x10L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x89000000030000L, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800080000000000L, 0x400000002000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x18200000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x220800400000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000000800000000L, 0x1f100007e4288302L, 0x8008L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000800000L, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x1010000000L, 0x100000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x4000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L);
      case 123:
         jjmatchedKind = 6;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L, 0x0L);
      case 125:
         jjmatchedKind = 7;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xe200080200000000L, active1, 0x20200010a0002L, active2, 0x1000L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000000000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000000L, active2, 0x80L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x2012800000000L, active1, 0x4010880804600000L, active2, 0x12000L);
      case 70:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x1f00000000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x184008000000000L, active1, 0x2800000a010000L, active2, 0xc002L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0x20020L);
      case 78:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x2000010010000080L, active2, 0x40800L);
      case 79:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800001000000000L, active1, 0x560c000006041L, active2, 0x318L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x20640400000000L, active1, 0x900000L, active2, 0x444L);
      case 83:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000L, active1, 0x38L, active2, 0x100000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x7a0000300L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40008000L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         break;
      case 90:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
         }
         break;
      case 94:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xe200080200000000L, active1, 0x20200010a0002L, active2, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000000L, active2, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2012800000000L, active1, 0x4010880804600000L, active2, 0x12000L);
      case 102:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x1f00000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x184008000000000L, active1, 0x2800000a010000L, active2, 0xc002L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0x20020L);
      case 110:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x2000010010000080L, active2, 0x40800L);
      case 111:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800001000000000L, active1, 0x560c000006041L, active2, 0x318L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20640400000000L, active1, 0x900000L, active2, 0x444L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000L, active1, 0x38L, active2, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x7a0000300L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40008000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         break;
      case 122:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
         }
         break;
      case 124:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 53:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 2;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x1f00803000000040L, active2, 0x14L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000008L, active2, 0L);
      case 67:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2010010000000000L, active2, 0L);
      case 68:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x210000000000L, active1, 0x10000000L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000000L, active1, 0L, active2, 0x420L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active2, 0x10000L);
      case 71:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000000000000L, active1, 0x80000000000L, active2, 0x100000L);
      case 75:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         break;
      case 76:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000800000000L, active1, 0x1000010L, active2, 0xa008L);
      case 77:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000000000L, active1, 0x20000000080002L, active2, 0L);
      case 78:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6080001000000000L, active1, 0x902c00a000020L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000000000L, active1, 0x100000100080L, active2, 0x40L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800200000L, active2, 0x200L);
      case 82:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7a4000300L, active2, 0x2L);
      case 83:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200a200000000L, active1, 0L, active2, 0x800L);
      case 84:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8810000000000000L, active1, 0x2000L, active2, 0x45000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4200000804001L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0x100L);
      case 87:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 2;
         }
         break;
      case 88:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         break;
      case 89:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 2;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x1f00803000000040L, active2, 0x14L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000008L, active2, 0L);
      case 99:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2010010000000000L, active2, 0L);
      case 100:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x210000000000L, active1, 0x10000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000000L, active1, 0L, active2, 0x420L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active2, 0x10000L);
      case 103:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000000000000L, active1, 0x80000000000L, active2, 0x100000L);
      case 107:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         break;
      case 108:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000800000000L, active1, 0x1000010L, active2, 0xa008L);
      case 109:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000000000L, active1, 0x20000000080002L, active2, 0L);
      case 110:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6080001000000000L, active1, 0x902c00a000020L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000000000L, active1, 0x100000100080L, active2, 0x40L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800200000L, active2, 0x200L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7a4000300L, active2, 0x2L);
      case 115:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200a200000000L, active1, 0L, active2, 0x800L);
      case 116:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8810000000000000L, active1, 0x2000L, active2, 0x45000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4200000804001L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0x100L);
      case 119:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 2;
         }
         break;
      case 120:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         break;
      case 121:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x2000L, active2, 0L);
      case 49:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 3;
         }
         break;
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x600000000000000L, active2, 0L);
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 53:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 65:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x400200000L, active2, 0x10420L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 67:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x4000000000L, active2, 0L);
      case 68:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000180L, active2, 0L);
      case 69:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x280800000000L, active1, 0x20000110400002L, active2, 0xa800L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 71:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 72:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 3;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x214000000000000L, active1, 0x10L, active2, 0L);
      case 76:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000820000248L, active2, 0L);
      case 77:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000004001L, active2, 0x100000L);
      case 79:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x10110000000000L, active2, 0L);
      case 80:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x80000L, active2, 0x4L);
      case 82:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x4000000000000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x408001000000000L, active1, 0x30c1000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x100008000000000L, active1, 0x1008000000000L, active2, 0x2L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x80410000000000L, active1, 0x8000000100020L, active2, 0x8L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 89:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x400200000L, active2, 0x10420L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x4000000000L, active2, 0L);
      case 100:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000180L, active2, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x280800000000L, active1, 0x20000110400002L, active2, 0xa800L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 104:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x214000000000000L, active1, 0x10L, active2, 0L);
      case 108:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000820000248L, active2, 0L);
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000004001L, active2, 0x100000L);
      case 111:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x10110000000000L, active2, 0L);
      case 112:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x80000L, active2, 0x4L);
      case 114:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x4000000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x408001000000000L, active1, 0x30c1000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100008000000000L, active1, 0x1008000000000L, active2, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80410000000000L, active1, 0x8000000100020L, active2, 0x8L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 121:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 53:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 56:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc800000208L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x10800000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 69:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x908000000000000L, active1, 0x220000040L, active2, 0L);
      case 70:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 71:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 4;
         }
         break;
      case 72:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8400000000L, active1, 0xc002000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x20L, active2, 0L);
      case 78:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x10000100000000L, active2, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 80:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 82:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x200000L, active2, 0x800L);
      case 83:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 4;
         }
         break;
      case 84:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8400001000000000L, active1, 0x80000c0000012L, active2, 0x2408L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x10002L);
      case 88:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc800000208L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10800000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x908000000000000L, active1, 0x220000040L, active2, 0L);
      case 102:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 103:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 4;
         }
         break;
      case 104:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8400000000L, active1, 0xc002000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x20L, active2, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x10000100000000L, active2, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x200000L, active2, 0x800L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 4;
         }
         break;
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8400001000000000L, active1, 0x80000c0000012L, active2, 0x2408L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x10002L);
      case 120:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 5;
         }
         break;
      case 52:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
         }
         break;
      case 54:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 5;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x80200000L, active2, 0x2L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x804000000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2010000100000000L, active2, 0L);
      case 69:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x8010000000032L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 71:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x8000000000L, active2, 0x8L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 78:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10008000000000L, active1, 0x8000208L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 82:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 83:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 84:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 88:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x80200000L, active2, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x804000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2010000100000000L, active2, 0L);
      case 101:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x8010000000032L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x8000000000L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 110:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10008000000000L, active1, 0x8000208L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 120:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x100040L, active2, 0L);
      case 68:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 71:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 75:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20008000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000L, active2, 0x8L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000032L, active2, 0L);
      case 83:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x200000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x100040L, active2, 0L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 103:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 107:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20008000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000L, active2, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000032L, active2, 0L);
      case 115:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x200000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000001000000000L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
         }
         break;
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 76:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         break;
      case 77:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x300000L, active2, 0L);
      case 82:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 83:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 84:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000001000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
         }
         break;
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         break;
      case 109:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x300000L, active2, 0L);
      case 114:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 115:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 8;
         }
         break;
      case 69:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 8;
         }
         break;
      case 71:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 76:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 82:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
         }
         break;
      case 83:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 99:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 8;
         }
         break;
      case 101:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 8;
         }
         break;
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
         }
         break;
      case 115:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000L, active2, 0x2L);
      case 83:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000L, active2, 0x2L);
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000L, active2, 0x2L);
      case 83:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 10;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000L, active2, 0x2L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x2L);
      case 84:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 11;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa12_0(active1, 0x10000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x2L);
      case 116:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 11;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa12_0(active1, 0x10000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 72:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 12;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000000000L, active2, 0L);
      case 104:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 12;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 73:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 13;
         }
         break;
      case 105:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 13;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x5e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff00000000ffffL
};
static final long[] jjbitVec10 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec12 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 152;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 156)
                        kind = 156;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(147, 148);
                  else if (curChar == 45)
                     jjCheckNAddStates(7, 11);
                  else if (curChar == 43)
                     jjCheckNAddStates(12, 16);
                  else if (curChar == 58)
                  {
                     if (kind > 150)
                        kind = 150;
                     jjCheckNAdd(81);
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(16, 17);
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 40)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 35)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 24;
                  if (curChar == 34)
                     jjCheckNAddStates(17, 19);
                  else if (curChar == 39)
                     jjCheckNAddStates(20, 22);
                  break;
               case 1:
                  if (curChar != 35)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 41 && kind > 30)
                     kind = 30;
                  break;
               case 7:
                  if ((0x100003600L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 12:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xaffffffa00000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 62 && kind > 149)
                     kind = 149;
                  break;
               case 18:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if ((0x3ff200000000000L & l) != 0L && kind > 152)
                     kind = 152;
                  break;
               case 23:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 153)
                     kind = 153;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(28);
                  break;
               case 31:
                  if (curChar == 45)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
                  if (curChar == 39)
                     jjCheckNAddStates(20, 22);
                  break;
               case 34:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 36:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 37:
                  if (curChar == 39 && kind > 171)
                     kind = 171;
                  break;
               case 38:
                  if (curChar == 34)
                     jjCheckNAddStates(17, 19);
                  break;
               case 39:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 41:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 42:
                  if (curChar == 34 && kind > 172)
                     kind = 172;
                  break;
               case 43:
                  if (curChar == 39)
                     jjCheckNAddStates(25, 28);
                  break;
               case 44:
               case 49:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 45:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 47:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 48:
                  if (curChar == 39)
                     jjAddStates(29, 30);
                  break;
               case 50:
                  if (curChar == 39 && kind > 173)
                     kind = 173;
                  break;
               case 51:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 53:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 34)
                     jjCheckNAddStates(31, 34);
                  break;
               case 55:
               case 60:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 56:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(31, 34);
                  break;
               case 58:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(31, 34);
                  break;
               case 59:
                  if (curChar == 34)
                     jjAddStates(35, 36);
                  break;
               case 61:
                  if (curChar == 34 && kind > 174)
                     kind = 174;
                  break;
               case 62:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 64:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 75:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 76:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if (curChar == 58 && kind > 150)
                     kind = 150;
                  break;
               case 78:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 79:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if (curChar == 58)
                     jjCheckNAdd(81);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 82:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if ((0x3ff200000000000L & l) != 0L && kind > 151)
                     kind = 151;
                  break;
               case 84:
                  if (curChar != 58)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjCheckNAdd(81);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAddStates(0, 6);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAdd(86);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 88:
                  if (curChar != 46)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(89);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 91:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 94:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(95);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 97);
                  break;
               case 98:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(99);
                  break;
               case 100:
                  if (curChar == 43)
                     jjCheckNAddStates(12, 16);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAdd(101);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 103:
                  if (curChar != 46)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAdd(104);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAdd(104);
                  break;
               case 105:
                  if (curChar == 46)
                     jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAdd(106);
                  break;
               case 107:
                  if (curChar == 46)
                     jjCheckNAdd(108);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 110:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(111);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(111);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(113, 114);
                  break;
               case 114:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 117:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(118);
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(118);
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(119, 120);
                  break;
               case 121:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(122);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(122);
                  break;
               case 123:
                  if (curChar == 45)
                     jjCheckNAddStates(7, 11);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 158)
                     kind = 158;
                  jjCheckNAdd(124);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(125, 126);
                  break;
               case 126:
                  if (curChar != 46)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(127);
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(127);
                  break;
               case 128:
                  if (curChar == 46)
                     jjCheckNAdd(129);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(129);
                  break;
               case 130:
                  if (curChar == 46)
                     jjCheckNAdd(131);
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(131, 132);
                  break;
               case 133:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(134);
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(134);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(45, 48);
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(136, 137);
                  break;
               case 137:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(138, 139);
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(138, 139);
                  break;
               case 140:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(141);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(141);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(142, 143);
                  break;
               case 144:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(145);
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(145);
                  break;
               case 146:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(147, 148);
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(147);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(148, 149);
                  break;
               case 150:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(151);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(151);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 54);
                  else if (curChar == 64)
                     jjCheckNAdd(30);
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 91)
                     jjAddStates(23, 24);
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(55, 57);
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 2:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if (curChar == 91)
                     jjAddStates(23, 24);
                  break;
               case 8:
                  if (curChar == 93 && kind > 31)
                     kind = 31;
                  break;
               case 9:
                  if ((0x20000000200L & l) != 0L && kind > 74)
                     kind = 74;
                  break;
               case 10:
               case 73:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 11:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(14);
                  break;
               case 16:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 152)
                     kind = 152;
                  break;
               case 22:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 24:
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 153)
                     kind = 153;
                  jjCheckNAdd(25);
                  break;
               case 27:
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if (curChar == 64)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 34:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 35:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 39:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 40:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 45:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 46:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 56:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(31, 34);
                  break;
               case 57:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(31, 34);
                  break;
               case 65:
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(55, 57);
                  break;
               case 66:
                  if ((0x20000000200L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 67:
               case 70:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 68:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 74:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 54);
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 79:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 151)
                     kind = 151;
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(62, 63);
                  break;
               case 109:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 116:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               case 120:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 132:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 139:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(72, 73);
                  break;
               case 143:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(74, 75);
                  break;
               case 149:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(76, 77);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 54);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 13:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(14);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(58, 59);
                  break;
               case 19:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 152)
                     kind = 152;
                  break;
               case 24:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 153)
                     kind = 153;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 153)
                     kind = 153;
                  jjCheckNAdd(25);
                  break;
               case 27:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(28);
                  break;
               case 28:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(28);
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 22);
                  break;
               case 39:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(17, 19);
                  break;
               case 45:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 28);
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(31, 34);
                  break;
               case 75:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 76:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(77);
                  break;
               case 78:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 79:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(80);
                  break;
               case 81:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 82:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 151)
                     kind = 151;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 152 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   86, 87, 88, 90, 91, 96, 97, 124, 125, 128, 130, 135, 101, 102, 105, 107, 
   112, 39, 40, 42, 34, 35, 37, 7, 8, 44, 45, 46, 48, 49, 51, 55, 
   56, 57, 59, 60, 62, 75, 76, 78, 79, 113, 114, 119, 120, 136, 137, 142, 
   143, 75, 76, 77, 78, 79, 80, 69, 72, 73, 16, 17, 94, 95, 98, 99, 
   110, 111, 117, 118, 121, 122, 133, 134, 140, 141, 144, 145, 150, 151, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", 
"\54", "\56", "\75", "\41\75", "\76", "\74", "\74\75", "\76\75", "\41", "\174\174", 
"\46\46", "\53", "\55", "\52", "\77", "\57", "\174", "\136", "\136\136", null, null, 
"\141", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\72\75", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffff1L, 0xffffffffffffffffL, 0x7e1cffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0xcL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x8L, 0x0L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[152];
private final int[] jjstateSet = new int[304];
protected char curChar;
/** Constructor. */
public SyntaxTreeBuilderTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SyntaxTreeBuilderTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 152; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
